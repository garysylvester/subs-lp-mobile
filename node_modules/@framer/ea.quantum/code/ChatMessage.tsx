import * as React from 'react';
import { PropertyControls, ControlType } from 'framer';
import * as moment from 'moment';

import { ChatBubble } from './ChatBubble';
import { Avatar } from './Avatar';
import { IconSmall } from './Icon/IconSmall';
import * as tokens from './tokens';

interface Message {
    authorUsername: string;
    authorImageUrl: string;
    text: string;
    timestamp: number;
}

interface IChatMessageProps {
    messages: Message[];
    direction: string;
    style: any;
    hideAvatar: boolean;
    seen: boolean;
}

export class ChatMessage extends React.Component<IChatMessageProps> {
    static defaultProps = {
        messages: [
            {
                timestamp: Date.now(),
                text: 'Text that goes into the chat bubble!',
                authorUsername: 'emilwidlund',
                authorImageUrl: 'https://pbs.twimg.com/profile_images/1064513641788162048/wBBwZQt8_400x400.jpg'
            }
        ],
        direction: 'left',
        hideAvatar: false,
        seen: false
    };

    static propertyControls: PropertyControls = {
        hideAvatar: {
            title: 'Hide Avatar',
            type: ControlType.Boolean
        },
        direction: {
            title: 'Direction',
            type: ControlType.SegmentedEnum,
            options: ['left', 'right'],
            optionTitles: ['Left', 'Right']
        },
        seen: {
            title: 'Seen',
            type: ControlType.Boolean
        }
    };

    render() {
        return (
            <div
                style={{
                    display: 'flex',
                    flexDirection: 'column',
                    fontFamily: 'BrownPro, Proxima Nova, Helvetica, Arial, sans-serif',
                    ...this.props.style
                }}>
                {this.props.direction === 'left' && !this.props.hideAvatar ? (
                    <div
                        style={{
                            display: 'flex',
                            flexDirection: this.props.direction === 'left' ? 'row' : 'row-reverse',
                            marginBottom: 8
                        }}>
                        <Avatar image={this.props.messages[0].authorImageUrl} size='32' />
                        <span
                            style={{
                                color: tokens.TextColor.neutral,
                                marginTop: 8,
                                fontSize: tokens.TextSizeDataDesktop.small,
                                fontWeight: 500,
                                letterSpacing: 1,
                                marginLeft: 10,
                                marginRight: 10
                            }}>
                            {this.props.messages[0].authorUsername}
                        </span>
                    </div>
                ) : null}

                {this.props.messages.map((message, index) => {
                    return <ChatBubble key={index} text={message.text} direction={this.props.direction} />;
                })}

                <div
                    style={{
                        display: 'flex',
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: this.props.direction === 'left' ? 'flex-start' : 'flex-end',
                        width: '100%'
                    }}>
                    <p
                        style={{
                            color: tokens.TextColor.neutral,
                            fontSize: tokens.TextSizeDataDefault.small,
                            textTransform: 'uppercase',
                            whiteSpace: 'nowrap',
                            overflow: 'hidden',
                            textOverflow: 'ellipsis',
                            textAlign: this.props.direction === 'left' ? 'left' : 'right',
                            fontFamily: 'Apercu Mono Pro, Proxima Nova, Helvetica, Arial, sans-serif',
                            fontWeight: 500
                        }}>
                        {moment(this.props.messages.slice(0).pop().timestamp).format('LT')}
                    </p>
                    {this.props.seen && this.props.direction === 'right' ? (
                        <div style={{ marginLeft: 10 }}>
                            <IconSmall color='more' primaryColor={tokens.ColorSystem.success} icon='check' />
                        </div>
                    ) : null}
                </div>
            </div>
        );
    }
}
