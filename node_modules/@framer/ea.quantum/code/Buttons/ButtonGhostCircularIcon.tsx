import * as React from 'react';
import { PropertyControls, ControlType } from 'framer';
import styled, { css } from 'styled-components';
import * as tokens from '../tokens';
import { MediumIcon, IconDisplayNames } from '../Icons/MediumIcon';

// Define type of property
interface Props {
    size: string;
    isEnabled: boolean;
    image: any;
    width: number;
    height: number;
    icon: any;
    iconColor: string;
    onClick(e: any): void;
}

const ButtonGCI = styled.button`
    position: relative;
    box-sizing: border-box;
    background: transparent;
    align-items: center;
    border: none;
    padding: 0;
    margin: 0;
    display: inline-flex;
    justify-content: center;

    .buttonInner {
      display: flex;
      justify-content: center;
      align-items: center;
      &:after {
        content: '';
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        position: absolute;
        border-radius: 99px;
        box-sizing: border-box;
        z-index: -1;
      }
    }
    .icon {
      display: block;
      box-sizing: border-box;
      display: inline-block;
    }

    ${props =>
        props.isEnabled == true &&
        css`
            .buttonInner {
                &:after {
                    background: ${tokens.ColorButton.ghost};
                    border: 0;
                    transition: all 125ms cubic-bezier(0.77, 0, 0.175, 1);
                }
            }

            &:hover {
                .buttonInner {
                    &:after {
                        transform: scale(0.96);
                        background: ${tokens.ColorButton.hollow};
                    }
                }
            }

            &:active {
                .buttonInner {
                    &:after {
                        transform: scale(0.96);
                        background: ${tokens.ColorButton.ghost};
                    }
                }
            }

            &:focus {
                .buttonInner {
                    &:after {
                        background: ${tokens.ColorButton.ghost};
                    }
                }
            }
        `}
    
    ${props =>
        props.isEnabled == false &&
        css`
            cursor: not-allowed;
            .buttonInner {
                span {
                    color: ${tokens.ColorNeutral._300};
                }
                &:after {
                    opacity: 0.2;
                    background: ${tokens.ColorButton.ghost};
                }
            }
        `}

    ${props =>
        props.size == 'small' &&
        css`
            height: 32px;
            width: 32px;
            .icon {
                height: 16px;
                width: 16px;
            }
            .buttonInner {
                padding: 8px;
                &:after {
                    border-radius: 99px;
                }
            }
            span {
                font-size: ${tokens.TextSizeButtonDefault.small};
            }
        `}

    ${props =>
        props.size == 'medium' &&
        css`
            height: 48px;
            width: 48px;
            .icon {
                height: 16px;
                width: 16px;
            }
            .buttonInner {
                padding: 16px;
                &:after {
                    border-radius: 99px;
                }
            }
            span {
                font-size: ${tokens.TextSizeButtonDefault.medium};
            }
        `}

    ${props =>
        props.size == 'large' &&
        css`
            height: 64px;
            width: 64px;
            .icon {
                height: 24px;
                width: 24px;
                img {
                    height: 24px;
                    width: 24px;
                }
            }
            .buttonInner {
                padding: 16px;
                &:after {
                    border-radius: 99px;
                }
            }
            span {
                font-size: ${tokens.TextSizeButtonDefault.large};
            }
        `}
`;

export class ButtonGhostCircularIcon extends React.Component<Props> {
    // Set default properties
    static defaultProps = {
        text: 'Label',
        size: 'small',
        image: null,
        isEnabled: true,
        width: 32,
        height: 32,
        onClick: () => null
    };
    // Items shown in property panel
    static propertyControls: PropertyControls = {
        text: {
            type: ControlType.String,
            title: 'Label'
        },
        size: {
            type: ControlType.Enum,
            title: 'Size',
            options: ['small', 'medium', 'large'],
            optionTitles: ['Small', 'Medium', 'Large']
        },
        icon: {
            type: ControlType.Enum,
            title: 'Icon',
            options: IconDisplayNames.iconNames
        },
        iconColor: {
            type: ControlType.SegmentedEnum,
            title: 'Icon Color',
            options: ['Light', 'Dark'],
            optionTitles: ['Light', 'Dark']
        },
        isEnabled: {
            type: ControlType.Boolean,
            title: 'Enabled'
        }
    };

    render() {
        return (
            <ButtonGCI isEnabled={this.props.isEnabled} size={this.props.size} onClick={this.props.onClick}>
                <div className='buttonInner'>
                    <MediumIcon name={this.props.icon} color={this.props.iconColor} />
                </div>
            </ButtonGCI>
        );
    }
}
