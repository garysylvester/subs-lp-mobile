import * as React from 'react';
import { PropertyControls, ControlType } from 'framer';
import styled, { css } from 'styled-components';
import { ButtonGhostIcon } from './Buttons/ButtonGhostIcon';
import * as tokens from './tokens';

// Define type of property
interface Props {
    state: string;
    title: string;
    buttonOpenIcon: string;
    buttonClosedIcon: string;
    width: number;
    height: number;
}

const AccordionWrapper = styled.div`
  display: flex;
  flex-direction: column;
  /* height: auto !important; */
  box-sizing: border-box;
  /* position: static !important; */
  background-color: ${tokens.ColorNeutral._500};
  width: 100%;
  
  .accordionBar{
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: ${tokens.SpacePaddingSquishDefault.small};
      width: 100%;
      span {
        font-weight: 600;
        color: ${tokens.TextColor.light};
        font-family: "BrownPro", "Proxima Nova", Helvetica, Arial, sans-serif;
        letter-spacing: ${tokens.TextSpaceLetterSpacing.heading};
        font-size: ${tokens.TextSizeParagraphDefault.smaller};
        text-transform: uppercase;
      }
  }

  .accordionBody{
    background-color: ${tokens.ColorNeutral._500};
    height: auto;
    display: flex;
    flex-direction: column;
    width: 100% !important;
    & > div {
        position: static !important;
        width: 100%;
    }
  }
  

  /* Styling for disblaed button state */
  /* ${props =>
      props.state == 'closed' &&
      css`
          .accordionBody {
              height: 0;
          }
      `} */
`;

export class Accordion extends React.Component<Props> {
    // Set default properties
    static defaultProps = {
        state: 'default',
        titile: 'Title',
        width: 240,
        height: 300
    };
    // Items shown in property panel
    static propertyControls: PropertyControls = {
        state: {
            type: ControlType.SegmentedEnum,
            title: 'State',
            options: ['open', 'closed'],
            optionTitles: ['Open', 'Closed']
        },
        title: {
            type: ControlType.String,
            title: 'Title'
        },
        buttonOpenIcon: {
            type: ControlType.File,
            title: 'Icon',
            allowedFileTypes: ['svg', 'png', 'jpg', 'gif']
        },
        buttonClosedIcon: {
            type: ControlType.File,
            title: 'Icon',
            allowedFileTypes: ['svg', 'png', 'jpg', 'gif']
        }
    };

    state = { toggle: true };

    handleToggle() {
        this.setState({
            toggle: !this.state.toggle
        });
    }

    render() {
        return (
            <AccordionWrapper state={this.props.state}>
                <div className='accordionBar' onClick={this.handleToggle.bind(this)}>
                    <span>{this.props.title}</span>
                    <ButtonGhostIcon icon={this.props.buttonOpenIcon} size='small' />
                </div>
                {this.state.toggle ? <div className='accordionBody'>{this.props.children}</div> : null}
            </AccordionWrapper>
        );
    }
}
