import * as React from 'react';
import { Frame, FrameProperties, PropertyControls, ControlType } from 'framer';

import * as tokens from './tokens';
import { Icon } from './Icon/Icon';

interface ITabNavigationProps extends FrameProperties {
    labels: string[];
    icons: string[];
    frames: any[];
    hideTabHeader: boolean;
    collapsed?: boolean;
    tabHeaderTransition?: string;
    activeIndex?: number;
    onActiveIndexChange?(index: number): void;
}

interface ITabNavigationState {
    active: number;
    hover: number;
}

export class TabNavigation extends React.Component<ITabNavigationProps, ITabNavigationState> {
    static defaultProps = {
        width: 300,
        labels: [],
        icons: [],
        frames: [],
        collapsed: false,
        hideTabHeader: false
    };

    static propertyControls: PropertyControls = {
        collapsed: {
            title: 'Collapsed',
            type: ControlType.Boolean
        },
        labels: {
            title: 'Labels',
            type: ControlType.Array,
            propertyControl: {
                type: ControlType.String
            }
        },
        icons: {
            title: 'Icons',
            type: ControlType.Array,
            propertyControl: {
                type: ControlType.String
            }
        },
        frames: {
            title: 'Frames',
            type: ControlType.Array,
            propertyControl: {
                type: ControlType.ComponentInstance
            }
        }
    };

    state = {
        active: this.props.activeIndex > -1 ? this.props.activeIndex : 0,
        hover: null
    };

    componentDidUpdate(prevProps) {
        if (prevProps.activeIndex !== this.props.activeIndex && Number.isInteger(this.props.activeIndex)) {
            this.setState({
                active: this.props.activeIndex
            });
        }
    }

    renderCollapsedHeader(icons) {
        return (
            <div
                style={{
                    display: 'flex',
                    width: '100%',
                    height: 42,
                    borderRadius: 14,
                    border: '2px solid rgb(52, 54, 71)',
                    overflow: 'hidden'
                }}>
                {icons.map((icon, index) => {
                    return (
                        <div
                            style={{
                                width: '50%',
                                height: '100%',
                                backgroundColor: this.state.active === index ? 'rgb(52, 54, 71)' : null
                            }}>
                            <Icon
                                icon={icon}
                                color={this.state.active === index ? 'light' : 'more'}
                                primaryColor='rgba(255, 255, 255, .2)'
                                size='sm'
                            />
                        </div>
                    );
                })}
            </div>
        );
    }

    renderTabButton(label, index) {
        return (
            <div
                key={index}
                style={{
                    position: 'relative',
                    display: 'flex',
                    height: 40,
                    flexBasis: 0,
                    flexGrow: 1,
                    justifyContent: 'center',
                    alignItems: 'center',
                    borderRadius: 14,
                    marginLeft: index > 0 ? 8 : null,
                    backgroundColor:
                        this.state.active === index
                            ? tokens.ColorNeutral._900
                            : this.state.hover === index
                            ? tokens.ColorNeutral._500
                            : 'transparent',
                    transition: 'background-color .2s'
                }}
                onClick={() => {
                    if (!this.props.frames[index]) return;

                    this.setState(
                        {
                            active: index
                        },
                        () => {
                            this.props.onActiveIndexChange ? this.props.onActiveIndexChange(index) : null;
                        }
                    );
                }}
                onMouseOver={() => {
                    this.setState({
                        hover: index
                    });
                }}
                onMouseOut={() => {
                    this.setState({
                        hover: null
                    });
                }}>
                {this.props.icons[index] ? <Icon icon={this.props.icons[index]} color='light' /> : null}
                <span
                    style={{
                        color: this.state.active === index ? tokens.TextColor.light : tokens.TextColor.neutral,
                        marginLeft: this.props.icons[index] ? 4 : null,
                        fontFamily: 'BrownPro, Proxima Nova, Helvetica, Arial, sans-serif',
                        fontSize: 14,
                        transition: 'all .1s ease-in-out'
                    }}>
                    {label}
                </span>
            </div>
        );
    }

    render() {
        return (
            <Frame width={this.props.width} height={this.props.height} top={0} left={0} background={null}>
                <div
                    style={{
                        display: 'flex',
                        flexDirection: 'row',
                        opacity: this.props.hideTabHeader ? 0 : 1,
                        padding: 16,
                        transition: this.props.tabHeaderTransition
                    }}>
                    {this.props.collapsed
                        ? this.renderCollapsedHeader(this.props.icons)
                        : this.props.labels.map(this.renderTabButton.bind(this))}
                </div>
                <div
                    style={{
                        display: 'flex',
                        flexDirection: 'column'
                    }}>
                    {this.props.frames.length && this.props.labels.length
                        ? React.cloneElement(this.props.frames[this.state.active], {
                              width: this.props.width,
                              height: this.props.height,
                              top: 0,
                              left: 0
                          })
                        : null}
                </div>
            </Frame>
        );
    }
}
