import * as React from 'react';
import { ControlType, PropertyControls } from 'framer';

import { IconFrame, IconSVG } from './Icon.css';
import * as iconData from './Icon.data.json';
import * as tokens from '../tokens';
import {
    iconSizes,
    iconInnerHtml,
    iconColors,
    prettyIconTitles,
    prettyColorTitles,
    getIconOptionsAndTitles
} from './Icon.utils';

export interface IIconProps {
    size: string;
    group: string;
    icon: string;
    color: 'light' | 'dark' | 'more';
    primaryColor: string;
    secondaryColor: string;

    width: number;
    height: number;
}

export const iconDefaultProps = size => ({
    size: size,
    icon: 'ea-stroked',
    color: 'light',
    primaryColor: tokens.ColorNeutral._0,
    secondaryColor: tokens.ColorNeutral._0,

    width: iconSizes[size],
    height: iconSizes[size]
});

export const iconPropertyControls = (size, resizable = false): PropertyControls => {
    const [iconOptions, iconOptionTitles] = getIconOptionsAndTitles(size);

    const colorOptions = Object.values(iconColors);
    const colorOptionTitles = prettyColorTitles(Object.keys(iconColors));

    const sizing = {
        size: {
            title: 'Size',
            type: ControlType.SegmentedEnum,
            options: Object.keys(iconSizes)
        }
    };

    const base = {
        icon: {
            title: 'Icon',
            type: ControlType.Enum,
            options: iconOptions,
            optionTitles: iconOptionTitles
        },
        color: {
            title: 'Color',
            type: ControlType.SegmentedEnum,
            options: ['light', 'dark', 'more']
        },
        primaryColor: {
            title: 'Primary',
            type: ControlType.Enum,
            options: colorOptions,
            optionTitles: colorOptionTitles,
            hidden: props => props.color !== 'more'
        },
        secondaryColor: {
            title: 'Secondary',
            type: ControlType.Enum,
            options: colorOptions,
            optionTitles: colorOptionTitles,
            hidden: props => props.color !== 'more'
        }
    };

    return resizable ? { ...sizing, ...base } : base;
};

export function renderIcon(props: IIconProps): React.ReactNode {
    const { size, icon, color, primaryColor, secondaryColor } = props;

    return (
        <IconFrame size={size}>
            <IconSVG
                viewBox={`0 0 ${iconSizes[size]} ${iconSizes[size]}`}
                xmlns='http://www.w3.org/2000/svg'
                size={size}
                color={color}
                primaryColor={primaryColor}
                secondaryColor={secondaryColor}
                dangerouslySetInnerHTML={iconInnerHtml(size, icon)}
            />
        </IconFrame>
    );
}
