import * as _ from 'lodash';

import * as iconData from './Icon.data.json';
import * as tokens from '../tokens';

export const iconColors = collectIconColors({
    Neutral: tokens.ColorNeutral,
    Alternate: tokens.ColorAlternate,
    Brand: tokens.ColorBrand,
    System: tokens.ColorSystem,
    Gradient: provideGradientOptions(tokens.ColorGradient)
});

export const iconSizes = {
    sm: 16,
    md: 24,
    lg: 32,
    xl: 48
};

export function collectIconColors(colorSets) {
    let output = {};

    Object.keys(colorSets).forEach(setName => {
        Object.keys(colorSets[setName]).forEach(colorName => {
            output[`${setName}/${colorName}`] = colorSets[setName][colorName].replace(' ', '');
        });
    });

    return output;
}

export function provideGradientOptions(gradients) {
    return Object.keys(gradients).reduce(
        (output = {}, name) => ({
            ...output,
            [name]: `url(#${name})`
        }),
        {}
    );
}

export function renderGradientDefs(gradients) {
    return Object.entries(gradients).map(([name, gradient]: [string, string]) => {
        const gradientParsed = gradient
            .replace('linear-gradient(', '')
            .replace('))', ')')
            .replace(', ', '|')
            .replace('), ', ')|')
            .split('|');
        const [angle, start, end] = gradientParsed;

        return `
            <linearGradient id=${name} x1="0%" y1="100%" x2="100%" y2="0%">
                <stop offset="0%" stop-color="${start}" />
                <stop offset="100%" stop-color="${end}" />
            </linearGradient>
        `;
    });
}

export function iconInnerHtml(size: string, icon: string): { __html: string } {
    const __html = `
        <defs>
            ${renderGradientDefs(tokens.ColorGradient)}
        </defs>
        ${iconData[size][icon]}
    `;

    return { __html };
}

/**
 * Returns an `options` and `optionsTitles` lists of all icons for a specified size.
 *
 * @export
 * @param {('sm' | 'md' | 'lg' | 'xl')} size
 * @returns {[string[], string[]]} [options, optionTitles]
 */
export function getIconOptionsAndTitles(size: 'sm' | 'md' | 'lg' | 'xl'): [string[], string[]] {
    const options = _.keys(iconData[size]);
    const optionTitles = prettyIconTitles(options);

    return [options, optionTitles];
}

export function prettyIconTitles(titles: string[]): string[] {
    return titles.map(title => _.startCase(_.camelCase(title)));
}

export function prettyColorTitles(colors: string[]): string[] {
    return colors.map(color => {
        const [set, name] = color.split('/');

        return _.startCase(_.camelCase(`${set}-${name}`));
    });
}
