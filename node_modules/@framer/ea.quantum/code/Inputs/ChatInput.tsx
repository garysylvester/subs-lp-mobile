import * as React from 'react';
import { PropertyControls, ControlType } from 'framer';
import styled, { css } from 'styled-components';

import * as tokens from '../tokens';

import { ButtonHollowCircularIcon } from '../Buttons/ButtonHollowCircularIcon';
import { ButtonSolidCircularIcon } from '../Buttons/ButtonSolidCircularIcon';

// Define type of property
interface Props {
    defaultValue: string;
    placeholder: string;
    state: string;
    inputType: string;
    width: number;
    height: number;
    iconColor: string;
    buttonIcon1: string;
    buttonIcon2: string;
    onChange?(e: any): void;
    onFocus?(e: any): void;
    onKeyDown?(e: any): void;
    onEnterKeyDown?(value: string): void;
}

const InputWrapper = styled.div`
    display: flex;
    flex-direction: column;
    height: auto;
    box-sizing: border-box;
    position: relative;

    button:nth-child(1) {
        position: absolute;
        top: 8px;
        left: 8px;
        z-index: 1;
    }

    button:nth-child(3) {
        position: absolute;
        top: 8px;
        right: 8px;
        z-index: 1;
    }
    input {
        appearance: none;
        margin: ${tokens.SpaceMarginStackedDesktopSmall.smallest};
        padding: 8px 16px 8px 48px;
        border: 2px solid ${tokens.ColorNeutral._400};
        background-color: ${tokens.ColorNeutral._800};
        border-radius: 99px;
        width: 100%;
        height: 48px;
        color: ${tokens.TextColor.light};
        font-family: 'BrownPro', 'Proxima Nova', Helvetica, Arial, sans-serif;
        font-size: ${tokens.TextSizeParagraphDefault.medium};
        transition: all ${tokens.AnimationTimeDefault.slow} ${tokens.AnimationEasing.standard};
        &:hover {
            box-shadow: 0 0 30px rgba(0, 0, 0, 0.3);
            border-color: ${tokens.ColorNeutral._300};

            transition: all ${tokens.AnimationTimeDefault.slow} ${tokens.AnimationEasing.standard};
        }
        &:focus {
            outline: none;
            border-color: rgb(50, 120, 254);
            box-shadow: 0 0 30px rgba(50, 120, 254, 0.3);

            transition: all ${tokens.AnimationTimeDefault.slow} ${tokens.AnimationEasing.standard};
        }
    }
    /* svg {position: absolute;
  left: 16px;
  top: 15px;} */

    /* Styling for disblaed button state */
    ${props =>
        props.state == 'disabled' &&
        css`
            label {
                opacity: 0.5;
            }
            input {
                border-color: ${tokens.ColorNeutral._600};
                color: rgba(144, 142, 151, 0.5);
                background-color: ${tokens.ColorNeutral._700};
                cursor: not-allowed;
                &::placeholder {
                    color: rgba(144, 142, 151, 0.5);
                }
            }
            .assistiveText {
                opacity: 0.5;
            }
        `}
`;

export class ChatInput extends React.Component<Props> {
    // Set default properties
    static defaultProps = {
        defaultValue: '',
        placeholder: 'Placeholder',
        state: 'default',
        width: 420,
        height: 48,
        onChange: e => null,
        onFocus: e => null,
        onKeyDown: e => null,
        onEnterKeyDown: text => null
    };
    // Items shown in property panel
    static propertyControls: PropertyControls = {
        defaultValue: {
            type: ControlType.String,
            title: 'Value'
        },
        placeholder: {
            type: ControlType.String,
            title: 'Placeholder'
        },
        state: {
            type: ControlType.SegmentedEnum,
            title: 'State',
            options: ['default', 'disabled'],
            optionTitles: ['Default', 'Disabled']
        }
    };

    state = {
        value: this.props.defaultValue
    };

    handleChange(e) {
        this.setState({
            value: e.target.value
        });

        this.props.onChange(e);
    }

    handleFocus(e) {
        this.setState({
            value: e.target.value
        });

        this.props.onFocus(e);
    }

    handleKeyDown(e) {
        if (e.keyCode === 13) {
            this.handleEnterKeyDown(e);
        }

        this.props.onKeyDown(e);
    }

    handleEnterKeyDown(e) {
        const value = this.state.value;

        this.setState(
            {
                value: ''
            },
            () => {
                this.props.onEnterKeyDown(value);
            }
        );
    }

    render() {
        return (
            <InputWrapper state={this.props.state}>
                <ButtonHollowCircularIcon icon='Add' size='small' iconColor='Light' />
                <input
                    type='text'
                    placeholder={this.props.placeholder}
                    value={this.state.value}
                    onChange={this.handleChange.bind(this)}
                    onFocus={this.handleFocus.bind(this)}
                    onKeyDown={this.handleKeyDown.bind(this)}
                />

                <ButtonSolidCircularIcon icon='Send' size='small' iconColor='Light' />
            </InputWrapper>
        );
    }
}
