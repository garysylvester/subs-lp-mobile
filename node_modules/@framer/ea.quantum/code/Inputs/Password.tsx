import * as React from 'react';
import { PropertyControls, ControlType } from 'framer';
import styled, { css } from 'styled-components';
import { ButtonGhostIcon } from '../Buttons/ButtonGhostIcon';

import * as tokens from '../tokens';

// Define type of property
interface Props {
    label: string;
    defaultValue: string;
    placeholder: string;
    className: string;
    assistiveText: string;
    errorText: string;
    state: string;
    width: number;
    height: number;
    buttonIcon: any;
    onChange(e: any): void;
    onKeyDown(e: any): void;
}

interface State {
    showPassword: boolean;
    value: string;
}

const InputWrapper = styled.div`
    display: flex;
    flex-direction: column;
    box-sizing: border-box;
    label {
        text-transform: uppercase;
        display: block;
        margin: ${tokens.SpaceMarginStackedDesktopSmall.smallest};
        letter-spacing: ${tokens.TextSpaceLetterSpacing.heading};
        color: ${tokens.TextColor.light};
        font-weight: 600;
        font-family: 'BrownPro', 'Proxima Nova', Helvetica, Arial, sans-serif;
        font-size: ${tokens.TextSizeParagraphDefault.smaller};
    }
    .PasswordWrapper {
        position: relative;
    }
    input {
        appearance: none;
        margin: ${tokens.SpaceMarginStackedDesktopSmall.micro};
        padding: ${tokens.SpacePaddingSquishDefault.medium};
        border: 2px solid ${tokens.ColorNeutral._400};
        padding: ${tokens.SpacePaddingSquishDefault.small};
        border-radius: ${tokens.BorderRadiusDefault.smallest} ${tokens.BorderRadiusDefault.small}
            ${tokens.BorderRadiusDefault.small} ${tokens.BorderRadiusDefault.smallest};
        background-color: ${tokens.ColorNeutral._800};
        color: ${tokens.TextColor.light};
        font-family: 'BrownPro', 'Proxima Nova', Helvetica, Arial, sans-serif;
        font-size: ${tokens.TextSizeParagraphDefault.medium};
        transition: all ${tokens.AnimationTimeDefault.slow} ${tokens.AnimationEasing.standard};
        height: 48px;
        width: 100%;
        &::placeholder {
            color: ${tokens.TextColor.neutral};
        }
        &:hover {
            box-shadow: 0 0 30px rgba(0, 0, 0, 0.3);
            border-color: ${tokens.ColorNeutral._300};
        }

        &:focus {
            outline: none;
            border-color: rgb(50, 120, 254);
            box-shadow: 0 0 30px rgba(50, 120, 254, 0.3);
        }

        &.invalid {
            border-color: ${tokens.ColorSystem.error};
            &:focus {
                border-color: rgb(50, 120, 254);
            }
        }
    }

    span {
        font-weight: 400;
        margin: ${tokens.SpaceMarginStackedDesktopSmall.smallest};
        font-family: 'BrownPro', 'Proxima Nova', Helvetica, Arial, sans-serif;
        font-size: ${tokens.TextSizeParagraphDefault.smaller};
        width: 100%;
    }

    .assistiveText {
        color: ${tokens.TextColor.neutral};
    }

    .validationText {
        display: none;
        color: ${tokens.ColorSystem.error};
    }

    input.invalid + .helperText {
        .validationText {
            display: block;
        }
        .assistiveText {
            display: none;
        }
    }

    button {
        position: absolute;
        right: 8px;
        top: 8px;
        width: auto;
        span {
            margin-bottom: 0;
        }
    }

    /* Styling for disblaed button state */
    ${props =>
        props.state == 'disabled' &&
        css`
            label {
                opacity: 0.5;
            }
            input {
                border-color: ${tokens.ColorNeutral._600};
                color: rgba(144, 142, 151, 0.5);
                background-color: ${tokens.ColorNeutral._700};
                cursor: not-allowed;
                &::placeholder {
                    color: rgba(144, 142, 151, 0.5);
                }
            }
            .assistiveText {
                opacity: 0.5;
            }
        `}
`;

export class PasswordComponent extends React.Component<Props, State> {
    // Set default properties
    static defaultProps = {
        label: 'Label',
        defaultValue: '',
        placeholder: 'Placeholder...',
        assistiveText: 'This is assistive text.',
        state: 'default',
        width: 240,
        height: 100,
        onChange: e => null,
        onKeyDown: e => null
    };
    // Items shown in property panel
    static propertyControls: PropertyControls = {
        label: {
            type: ControlType.String,
            title: 'Label'
        },
        defaultValue: {
            type: ControlType.String,
            title: 'Value'
        },
        placeholder: {
            type: ControlType.String,
            title: 'Placeholder'
        },
        assistiveText: {
            type: ControlType.String,
            title: 'Assistive Text'
        },
        state: {
            type: ControlType.SegmentedEnum,
            title: 'State',
            options: ['default', 'disabled'],
            optionTitles: ['Default', 'Disabled']
        },
        buttonIcon: {
            type: ControlType.File,
            title: 'Button Icon',
            allowedFileTypes: ['svg', 'png', 'jpg', 'gif']
        }
    };

    state = {
        showPassword: false,
        value: this.props.defaultValue
    };

    togglePasswordVisiblity() {
        this.setState({
            showPassword: !this.state.showPassword
        });
    }

    handleChange(e) {
        this.setState({
            value: e.target.value
        });

        this.props.onChange(e);
    }

    render() {
        return (
            <InputWrapper state={this.props.state}>
                <label>{this.props.label}</label>
                <div className='PasswordWrapper'>
                    <input
                        type={this.state.showPassword ? 'text' : 'password'}
                        id='passwordField'
                        className={this.props.className}
                        placeholder={this.props.placeholder}
                        value={this.state.value}
                        onChange={this.handleChange.bind(this)}
                    />
                    <ButtonGhostIcon
                        icon={this.state.showPassword ? 'Open Lock' : 'Close Lock'}
                        size='small'
                        onClick={this.togglePasswordVisiblity.bind(this)}
                    />
                </div>
                <div className='helperText'>
                    <span className='assistiveText'>{this.props.assistiveText}</span>
                    <span className='validationText'>{this.props.errorText}</span>
                </div>
            </InputWrapper>
        );
    }
}
