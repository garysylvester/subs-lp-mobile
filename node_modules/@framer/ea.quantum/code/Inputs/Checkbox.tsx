import * as React from 'react';
import { PropertyControls, ControlType } from 'framer';
import styled, { css } from 'styled-components';

import * as tokens from '../tokens';

// Define type of property
interface Props {
    label: string;
    state: string;
    width: number;
    height: number;
}

const InputWrapper = styled.div`
    overflow: visible;
    /* Customize the label (the container) */
    .container {
        display: flex;
        align-items: center;
        position: relative;
        cursor: pointer;
        user-select: none;
        height: 24px;
        padding-left: 36px;
        text-transform: uppercase;
        margin: ${tokens.SpaceMarginStackedDesktopSmall.smallest};
        letter-spacing: ${tokens.TextSpaceLetterSpacing.heading};
        color: ${tokens.TextColor.light};
        font-weight: 600;
        font-family: 'BrownPro', 'Proxima Nova', Helvetica, Arial, sans-serif;
        font-size: ${tokens.TextSizeParagraphDefault.smaller};
    }

    /* Hide the browser's default checkbox */
    .container input {
        position: absolute;
        opacity: 0;
        cursor: pointer;
        height: 0;
        width: 0;
    }

    /* Create a custom checkbox */
    .checkmark {
        position: absolute;
        top: 0;
        left: 0;
        height: 24px;
        width: 24px;
        border: 2px solid ${tokens.ColorNeutral._400};
        border-radius: ${tokens.BorderRadiusDefault.smallest};
        background-color: ${tokens.ColorNeutral._800};
        color: ${tokens.TextColor.light};
        transition: all ${tokens.AnimationTimeDefault.slow} ${tokens.AnimationEasing.standard};
    }

    /* On mouse-over, add a grey background color */
    .container:hover input ~ .checkmark {
        box-shadow: 0 0 30px rgba(0, 0, 0, 0.3);
        border-color: ${tokens.ColorNeutral._300};
    }

    /* On mouse-over, add a grey background color */
    .container:focus input ~ .checkmark {
        outline: none;
        border-color: rgb(50, 120, 254);
        box-shadow: 0 0 30px rgba(50, 120, 254, 0.3);
    }

    /* When the checkbox is checked, add a blue background */
    .container input:checked ~ .checkmark {
        border-color: rgb(50, 120, 254);
    }

    /* Create the checkmark/indicator (hidden when not checked) */
    .checkmark:after {
        content: '';
        position: absolute;
        display: none;
    }

    /* Show the checkmark when checked */
    .container input:checked ~ .checkmark:after {
        display: block;
    }

    /* Style the checkmark/indicator */
    .container .checkmark:after {
        left: 7px;
        top: 3px;
        width: 4px;
        height: 10px;
        border: solid white;
        border-width: 0 2px 2px 0;
        -webkit-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
        transform: rotate(45deg);
    }

    span {
        font-weight: 400;
        margin: ${tokens.SpaceMarginStackedDesktopSmall.smallest};
        font-family: 'BrownPro', 'Proxima Nova', Helvetica, Arial, sans-serif;
        font-size: ${tokens.TextSizeParagraphDefault.smaller};
        width: 100%;
    }

    .assistiveText {
        color: ${tokens.TextColor.neutral};
    }

    .validationText {
        display: none;
        color: ${tokens.ColorSystem.error};
    }

    input.invalid + .helperText {
        .validationText {
            display: block;
        }
        .assistiveText {
            display: none;
        }
    }

    /* Styling for disabled button state */
    ${props =>
        props.state == 'disabled' &&
        css`
            label {
                opacity: 0.5;
            }
            .checkmark {
                border-color: ${tokens.ColorNeutral._600};
                color: rgba(144, 142, 151, 0.5);
                background-color: ${tokens.ColorNeutral._700};
                cursor: not-allowed;
            }
        `}
`;
export class CheckboxComponent extends React.Component<Props> {
    // Set default properties
    static defaultProps = {
        label: 'Label',
        state: 'default',
        width: 100,
        height: 24
    };
    // Items shown in property panel
    static propertyControls: PropertyControls = {
        label: {
            type: ControlType.String,
            title: 'Label'
        },
        state: {
            type: ControlType.SegmentedEnum,
            title: 'State',
            options: ['default', 'disabled'],
            optionTitles: ['Default', 'Disabled']
        }
    };

    render() {
        return (
            <InputWrapper state={this.props.state}>
                <label className='container'>
                    {this.props.label}
                    <input type='checkbox' />
                    <span className='checkmark' />
                </label>
                <div className='helperText'>
                    <span className='assistiveText'>This is assistive text.</span>
                    <span className='validationText'>This is wrong.</span>
                </div>
            </InputWrapper>
        );
    }
}
