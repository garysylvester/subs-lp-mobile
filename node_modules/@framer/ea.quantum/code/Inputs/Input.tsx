import * as React from 'react';
import MaskedInput from 'react-text-mask';
import { PropertyControls, ControlType } from 'framer';
import styled, { css } from 'styled-components';

import * as tokens from '../tokens';

// Define type of property
interface Props {
    label: string;
    defaultValue: string;
    placeholder: string;
    assistiveText: string;
    state: string;
    inputMaskValue: string;
    className: string;
    errorMessage: string;
    width: number;
    height: number;
    onChange?(e: any): void;
    onFocus?(e: any): void;
    onKeyDown?(e: any): void;
}

const InputWrapper = styled.div`
    display: flex;
    flex-direction: column;
    box-sizing: border-box;
    label {
        text-transform: uppercase;
        display: block;
        margin: ${tokens.SpaceMarginStackedDesktopSmall.smallest};
        letter-spacing: ${tokens.TextSpaceLetterSpacing.heading};
        color: ${tokens.TextColor.light};
        font-weight: 600;
        font-family: 'BrownPro', 'Proxima Nova', Helvetica, Arial, sans-serif;
        font-size: ${tokens.TextSizeParagraphDefault.smaller};
    }
    input {
        appearance: none;
        margin: ${tokens.SpaceMarginStackedDesktopSmall.micro};
        padding: ${tokens.SpacePaddingSquishDefault.medium};
        border: 2px solid ${tokens.ColorNeutral._400};
        padding: ${tokens.SpacePaddingSquishDefault.small};
        border-radius: ${tokens.BorderRadiusDefault.smallest} ${tokens.BorderRadiusDefault.small}
            ${tokens.BorderRadiusDefault.small} ${tokens.BorderRadiusDefault.smallest};
        background-color: ${tokens.ColorNeutral._800};
        color: ${tokens.TextColor.light};
        font-family: 'BrownPro', 'Proxima Nova', Helvetica, Arial, sans-serif;
        font-size: ${tokens.TextSizeParagraphDefault.medium};
        transition: all ${tokens.AnimationTimeDefault.slow} ${tokens.AnimationEasing.standard};
        height: 48px;
        width: 100%;
        &::placeholder {
            color: ${tokens.TextColor.neutral};
        }
        &:hover {
            box-shadow: 0 0 30px rgba(0, 0, 0, 0.3);
            border-color: ${tokens.ColorNeutral._300};
        }

        &:focus {
            outline: none;
            border-color: rgb(50, 120, 254);
            box-shadow: 0 0 30px rgba(50, 120, 254, 0.3);
        }

        &.invalid {
            border-color: ${tokens.ColorSystem.error};
            &:focus {
                border-color: rgb(50, 120, 254);
            }
        }
    }

    span {
        font-weight: 400;
        margin: ${tokens.SpaceMarginStackedDesktopSmall.smallest};
        font-family: 'BrownPro', 'Proxima Nova', Helvetica, Arial, sans-serif;
        font-size: ${tokens.TextSizeParagraphDefault.smaller};
        width: 100%;
    }

    .assistiveText {
        color: ${tokens.TextColor.neutral};
    }

    .validationText {
        display: none;
        color: ${tokens.ColorSystem.error};
    }

    input.invalid + .helperText {
        .validationText {
            display: block;
        }
        .assistiveText {
            display: none;
        }
    }

    /* Styling for disblaed button state */
    ${props =>
        props.state == 'disabled' &&
        css`
            label {
                opacity: 0.5;
            }
            input {
                border-color: ${tokens.ColorNeutral._600};
                color: rgba(144, 142, 151, 0.5);
                background-color: ${tokens.ColorNeutral._700};
                cursor: not-allowed;
                &::placeholder {
                    color: rgba(144, 142, 151, 0.5);
                }
            }
            .assistiveText {
                opacity: 0.5;
            }
        `}
`;
export class InputComponent extends React.Component<Props> {
    // Set default properties
    static defaultProps = {
        label: 'Label',
        defaultValue: '',
        placeholder: 'Placeholder...',
        assistiveText: 'This is assistive text.',
        state: 'default',
        inputMaskValue: '',
        width: 240,
        height: 100,
        onChange: () => null,
        onFocus: () => null,
        onKeyDown: () => null
    };
    // Items shown in property panel
    static propertyControls: PropertyControls = {
        label: {
            type: ControlType.String,
            title: 'Label'
        },
        defaultValue: {
            type: ControlType.String,
            title: 'Value'
        },
        placeholder: {
            type: ControlType.String,
            title: 'Placeholder'
        },
        assistiveText: {
            type: ControlType.String,
            title: 'Assistive Text'
        },
        inputMaskValue: {
            type: ControlType.Enum,
            title: 'Input Mask',
            options: ['false', 'date', 'phoneUS', 'creditCard'],
            optionTitles: ['None', 'Date', 'US Phone Number', 'Credit Card']
        },
        state: {
            type: ControlType.SegmentedEnum,
            title: 'State',
            options: ['default', 'disabled'],
            optionTitles: ['Default', 'Disabled']
        }
    };

    state = {
        value: this.props.defaultValue
    };

    handleChange(e) {
        this.setState({
            value: e.target.value
        });

        this.props.onChange(e);
    }

    handleFocus(e) {
        this.setState({
            value: e.target.value
        });

        this.props.onFocus(e);
    }

    render() {
        var inputMask: any = false;

        if (this.props.inputMaskValue == 'date') {
            inputMask = [/\d/, /\d/, '/', /\d/, /\d/, '/', /\d/, /\d/, /\d/, /\d/];
        } else if (this.props.inputMaskValue == 'phoneUS') {
            inputMask = ['(', /[1-9]/, /\d/, /\d/, ')', ' ', /\d/, /\d/, /\d/, '-', /\d/, /\d/, /\d/, /\d/];
        } else if (this.props.inputMaskValue == 'creditCard') {
            inputMask = [
                /\d/,
                /\d/,
                /\d/,
                /\d/,
                ' ',
                /\d/,
                /\d/,
                /\d/,
                /\d/,
                ' ',
                /\d/,
                /\d/,
                /\d/,
                /\d/,
                ' ',
                /\d/,
                /\d/,
                /\d/,
                /\d/
            ];
        }
        return (
            <InputWrapper state={this.props.state}>
                <label>{this.props.label}</label>
                <MaskedInput
                    mask={inputMask}
                    guide='false'
                    type='text'
                    className={this.props.className}
                    placeholder={this.props.placeholder}
                    value={this.state.value}
                    onChange={this.handleChange.bind(this)}
                    onFocus={this.handleFocus.bind(this)}
                />
                <div className='helperText'>
                    <span className='assistiveText'>{this.props.assistiveText}</span>
                    <span className='validationText'>{this.props.errorMessage}</span>
                </div>
            </InputWrapper>
        );
    }
}
