import * as React from 'react';
import {Animatable, Frame, FrameProperties, ControlType, PropertyControls, Color} from 'framer';

import {FocusConsumer} from './FocusSystem.tsx';

export interface IFocusableProps extends FrameProperties {
    focusableId: string;
    focusBackground: Color;
    focusScale: number | Animatable<number>;
    focusScaleX: number | Animatable<number>;
    focusScaleY: number | Animatable<number>;
    focusScaleZ: number | Animatable<number>;
    focusRotationX: number | Animatable<number>;
    focusRotationY: number | Animatable<number>;
    focusRotationZ: number | Animatable<number>;
    focusTime: number;
    focusable: boolean;
}

export class Focusable extends React.Component<IFocusableProps> {

    static defaultProps: Partial<IFocusableProps> = {
        background: Color('rgba(255, 255, 255, .5)'),
        scale: 1,
        scaleX: 1,
        scaleY: 1,
        scaleZ: 1,
        rotationX: 0,
        rotationY: 0,
        rotationZ: 0,
        focusBackground: Color('rgba(255, 255, 255, .5)'),
        focusScale: 1,
        focusScaleX: 1,
        focusScaleY: 1,
        focusScaleZ: 1,
        focusRotationX: 0,
        focusRotationY: 0,
        focusRotationZ: 0,
        focusTime: 1,
        focusable: true
    }

    static propertyControls: PropertyControls<IFocusableProps> = {
        background: {
            title: 'Background',
            type: ControlType.Color
        },
        scale: {
            title: 'Scale',
            type: ControlType.Number,
            min: 0,
            max: 10,
            step: .01,
            defaultValue: 1
        },
        scaleX: {
            title: 'Scale X',
            type: ControlType.Number,
            min: 0,
            max: 10,
            step: .01,
            defaultValue: 1
        },
        scaleY: {
            title: 'Scale Y',
            type: ControlType.Number,
            min: 0,
            max: 10,
            step: .01,
            defaultValue: 1
        },
        scaleZ: {
            title: 'Scale Z',
            type: ControlType.Number,
            min: 0,
            max: 10,
            step: .01,
            defaultValue: 1
        },
        rotationX: {
            title: 'Rotation X',
            type: ControlType.Number,
            min: 0,
            max: 360,
            step: .1,
            defaultValue: 0
        },
        rotationY: {
            title: 'Rotation Y',
            type: ControlType.Number,
            min: 0,
            max: 360,
            step: .1,
            defaultValue: 0
        },
        rotationZ: {
            title: 'Rotation Z',
            type: ControlType.Number,
            min: 0,
            max: 360,
            step: .1,
            defaultValue: 0
        },

        focusableId: {
            title: 'Focusable Id',
            type: ControlType.String
        },
        focusBackground: {
            title: 'Focus Background',
            type: ControlType.Color
        },
        focusScale: {
            title: 'Focus Scale',
            type: ControlType.Number,
            min: 0,
            max: 10,
            step: .01,
            defaultValue: 1
        },
        focusScaleX: {
            title: 'Focus Scale X',
            type: ControlType.Number,
            min: 0,
            max: 10,
            step: .01,
            defaultValue: 1
        },
        focusScaleY: {
            title: 'Focus Scale Y',
            type: ControlType.Number,
            min: 0,
            max: 10,
            step: .01,
            defaultValue: 1
        },
        focusScaleZ: {
            title: 'Focus Scale Z',
            type: ControlType.Number,
            min: 0,
            max: 10,
            step: .01,
            defaultValue: 1
        },
        focusRotationX: {
            title: 'Focus Rotation X',
            type: ControlType.Number,
            min: 0,
            max: 360,
            step: .1,
            defaultValue: 0
        },
        focusRotationY: {
            title: 'Focus Rotation Y',
            type: ControlType.Number,
            min: 0,
            max: 360,
            step: .1,
            defaultValue: 0
        },
        focusRotationZ: {
            title: 'Focus Rotation Z',
            type: ControlType.Number,
            min: 0,
            max: 360,
            step: .1,
            defaultValue: 0
        },
        focusTime: {
            title: 'Focus Time',
            type: ControlType.Number,
            step: .1,
            defaultValue: 1
        },
        focusable: {
            title: 'Focusable',
            type: ControlType.Boolean,
            defaultValue: true
        }
    }

    get focusedStyle(): Partial<FrameProperties> {
        return {
            background: this.props.focusBackground,
            scale: this.props.focusScale,
            scaleX: this.props.focusScaleX,
            scaleY: this.props.focusScaleY,
            scaleZ: this.props.focusScaleZ,
            rotationX: this.props.focusRotationX,
            rotationY: this.props.focusRotationY,
            rotationZ: this.props.focusRotationZ
        }
    }

    render() {
        const {props, focusedStyle} = this;

        console.log(this.props)

        return (
            <FocusConsumer>
                {(context) => {
                    const {focused: focusedFocusable} = context;
                    let updatedProps = this.props;

                    if (focusedFocusable) {
                        updatedProps = focusedFocusable.props.focusableId === this.props.focusableId ? {...props, ...focusedStyle} : {...props};
                    }

                    return (
                        <Frame
                            {...updatedProps}
                        >
                            {this.props.children}
                        </Frame>
                    );
                }}
            </FocusConsumer>
        );
    }
}