import * as React from "react"
import { FrameProperties, PropertyControls, ControlType } from "framer"
import { ButtonSolidText } from "@framer/ea.quantum/code/Buttons/ButtonSolidText"
import { ButtonHollowText } from "@framer/ea.quantum/code/Buttons/ButtonHollowText"

interface HeroCarouselProps extends FrameProperties {
    items: any[]
    selectOnHover: boolean
}

export class HeroCarousel extends React.Component<
    Partial<HeroCarouselProps>,
    any
> {
    interval: any

    static propertyControls: PropertyControls = {
        items: {
            title: "Items",
            type: ControlType.Array,
            propertyControl: {
                type: ControlType.ComponentInstance,
            },
        },
        selectOnHover: {
            title: "Hover Select",
            type: ControlType.Boolean,
        },
    }

    static defaultProps = {
        width: 1352,
        selectOnHover: false,
    }

    constructor(props) {
        super(props)

        this.state = {
            selectedIndex: 0,
            selectOnHover: getQueryVariable("selectOnHover")
                ? getQueryVariable("selectOnHover") === "true"
                : this.props.selectOnHover,
        }

        this.startHighlightTimer = this.startHighlightTimer.bind(this)
    }

    componentDidMount() {
        this.interval = setInterval(() => {
            this.setState({
                selectedIndex:
                    this.state.selectedIndex < this.props.items.length - 1
                        ? this.state.selectedIndex + 1
                        : 0,
            })
        }, 5000)
    }

    startHighlightTimer() {
        this.interval = setInterval(() => {
            this.setState({
                selectedIndex:
                    this.state.selectedIndex < this.props.items.length - 1
                        ? this.state.selectedIndex + 1
                        : 0,
            })
        }, 5000)
    }

    render() {
        const selectedItemProps = this.props.items[this.state.selectedIndex]
            ? this.props.items[this.state.selectedIndex].props.children[0].props
            : {}

        return (
            <div
                style={{
                    position: "relative",
                    display: "flex",
                    flexDirection: "column",
                    width: this.props.width as number,
                    height: "100%",
                }}
            >
                {this.props.items.map(i => {
                    const itemProps = i.props.children[0]
                        ? i.props.children[0].props
                        : {}

                    return (
                        <div
                            style={{
                                position: "absolute",
                                top: 0,
                                right: 0,
                                bottom: 0,
                                left: 0,
                                backgroundImage: `url(${
                                    itemProps.backgroundImage
                                })`,
                                backgroundPosition: "center center",
                                backgroundSize: "cover",
                                opacity:
                                    selectedItemProps.backgroundImage ===
                                    itemProps.backgroundImage
                                        ? 1
                                        : 0,
                                transition: "opacity .66s",
                            }}
                        />
                    )
                })}
                <div
                    style={{
                        position: "absolute",
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0,
                        background:
                            "linear-gradient(rgba(29, 32, 51, 1), rgba(29, 32, 51, .5) 50%, rgba(29, 32, 51, 1) 100%)",
                    }}
                />
                <div
                    style={{
                        position: "relative",
                        height: 454,
                        padding: "200px 48px 48px 48px",
                        fontFamily: "BrownPro, sans-serif",
                        color: "#fff",
                        boxSizing: "border-box",
                        zIndex: 999,
                    }}
                >
                    <div
                        style={{
                            display: "flex",
                            position: "relative",
                            flexDirection: "column",
                            justifyContent: "space-between",
                            flexGrow: 0,
                            maxWidth: 404,
                            height: 160,
                        }}
                    >
                        <span
                            style={{
                                fontSize: 24,
                                fontWeight: 600,
                                lineHeight: 1.4,
                            }}
                        >
                            {selectedItemProps.highlightTitle}
                        </span>
                        <div
                            style={{
                                display: "flex",
                            }}
                        >
                            {selectedItemProps.primaryButtonText ? (
                                <ButtonSolidText
                                    text={selectedItemProps.primaryButtonText}
                                    size="medium"
                                />
                            ) : null}
                            {selectedItemProps.secondaryButtonText ? (
                                <div style={{ marginLeft: 16 }}>
                                    <ButtonHollowText
                                        text={
                                            selectedItemProps.secondaryButtonText
                                        }
                                        size="medium"
                                    />
                                </div>
                            ) : null}
                        </div>
                    </div>
                </div>
                <div
                    style={{
                        position: "relative",
                        display: "flex",
                        flexDirection: "row",
                        justifyContent: "space-between",
                        margin: "0 48px",
                    }}
                >
                    {React.Children.map(this.props.items, (c, index) => {
                        const count = this.props.items.length
                        const gutter = 24
                        const shelfWidth = (this.props.width as number) - 48 * 2
                        const width =
                            ((shelfWidth as number) - gutter * (count - 1)) /
                            count

                        return React.cloneElement(c as any, {
                            top: 0,
                            left: index * width + gutter * index,
                            width: width,
                            active: this.state.selectedIndex === index,
                            onClick: () => {
                                if (!this.state.selectOnHover) {
                                    this.setState(
                                        {
                                            selectedIndex: index,
                                        },
                                        () => {
                                            clearInterval(this.interval)
                                            this.startHighlightTimer()
                                        }
                                    )
                                }
                            },
                            onMouseOver: () => {
                                if (this.state.selectOnHover) {
                                    this.setState(
                                        {
                                            selectedIndex: index,
                                        },
                                        () => {
                                            clearInterval(this.interval)
                                        }
                                    )
                                }
                            },
                            onMouseOut: () => {
                                if (this.state.selectOnHover) {
                                    clearInterval(this.interval)
                                    this.startHighlightTimer()
                                }
                            },
                        })
                    })}
                </div>
            </div>
        )
    }
}

function getQueryVariable(variable) {
    var query = window.location.search.substring(1)
    var vars = query.split("&")
    for (var i = 0; i < vars.length; i++) {
        var pair = vars[i].split("=")
        if (decodeURIComponent(pair[0]) == variable) {
            return decodeURIComponent(pair[1])
        }
    }
    console.log("Query variable %s not found", variable)
}
